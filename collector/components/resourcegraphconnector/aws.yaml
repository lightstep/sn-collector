AWSTemplateFormatVersion: 2010-09-09
Description: Send AWS Config changes to ServiceNow Cloud Observability 
Parameters:
  CloudObsAccessToken:
    Default: <need to fill in>
    Type: String

Resources:
  LambdaToOTLPLogRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaToOTLPLogRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole

  LambdaToOTLPLog:
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          LS_ACCESS_TOKEN:
            Fn::Sub: "${CloudObsAccessToken}"
      Code:
        ZipFile: >
          import json
          import time
          import os
          import http.client

          def send_log(body, access_token):
              host = 'ingest.lightstep.com'
              path = '/v1/logs'
              
              headers = {
                  'Content-Type': 'application/json',
                  'lightstep-access-token': access_token
              }
              
              connection = http.client.HTTPSConnection(host)
              request_body = json.dumps(body)
              print(f'sending log: {request_body}')

              try:
                  connection.request('POST', path, body=request_body, headers=headers)
                  response = connection.getresponse()
                  
                  body = response.read().decode('utf-8')
                  connection.close()
                  return {
                      'statusCode': response.status,
                      'body': body 
                  }
              except Exception as e:
                  print(f"An error occurred: {e}")
                  return {
                      'statusCode': 500,
                      'body': e
                  }

          def create_log(ci):
              now = time.time_ns()
              lr = {
                "resourceLogs": [
                  {
                    "resource": {
                      "attributes": []
                    },
                    "scopeLogs": [
                      {
                        "scope": {},
                        "logRecords": [
                          {
                            "timeUnixNano": f"{now}",
                            "severityNumber": 9,
                            "severityText": "Info",
                            "name": "ci_change",
                            "body": {
                              "stringValue": "configuration item change"
                            },
                            "attributes": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
              
              for key, value in ci.items():
                  lr['resourceLogs'][0]['resource']['attributes'].append({
                      'key': key,
                      'value': {
                          'stringValue': f'{value}'
                      }
                  })

              return lr

          def lambda_handler(event, context):
              try:
                  invokingEvent = json.loads(event['invokingEvent'])
                  ci = invokingEvent['configurationItem']
                  lr = create_log(ci)
                  return send_log(lr, os.getenv('LS_ACCESS_TOKEN'))
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps(ci)
                  }
              except:
                  return {
                      'statusCode': 400,
                      'body': 'could not process CI event'
                  }

      Handler: index.lambda_handler
      Role:
        Fn::GetAtt: [ LambdaToOTLPLogRole , "Arn" ]
      Runtime: python3.12
      Timeout: 60

  CloudObsConnection:
    Type: AWS::Events::Connection
    Properties:
      Name: CloudObsConnection
      AuthorizationType: API_KEY
      AuthParameters:
        ApiKeyAuthParameters:
          ApiKeyName: lightstep-access-token
          ApiKeyValue:
            Fn::Sub: "${CloudObsAccessToken}"
      Description: Credentials to send data to ServiceNow Cloud Observability

  CloudObsApiDestination:
    Type: AWS::Events::ApiDestination
    Properties: 
      ConnectionArn:
        Fn::GetAtt: [ CloudObsConnection, Arn ]
      Description: ServiceNow Cloud Observability API destination
      HttpMethod: POST
      InvocationEndpoint: "https://ingest.lightstep.com"
      InvocationRateLimitPerSecond: 10
      Name: CloudObsApiDestination

  EventBridgeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: AllowConnectionCreation
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - events:InvokeApiDestination
                Resource:
                  - Fn::GetAtt: [ CloudObsApiDestination, Arn ]

  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "LambdaToOTLPLog"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "EventRule"
          - "Arn"

  EventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Listen for AWS Config rule compliance changes
      EventPattern:
        source:
          - aws.config
        detail-type:
          - Config Configuration Item Change
      State: ENABLED
      Targets:
        - Id: CloudObsApiDestination
          Arn:
            Fn::GetAtt: [ CloudObsApiDestination, Arn ]
          RoleArn:
            Fn::GetAtt: [ EventBridgeRole, Arn ]
        - Id: LambdaToOTLPLog
          Arn:
            Fn::GetAtt:
              - "LambdaToOTLPLog"
              - "Arn"
