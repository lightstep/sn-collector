// Code generated by mdatagen. DO NOT EDIT.

package azureeventhubreceiver

import (
	"testing"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/messaging/azeventhubs"
	"github.com/stretchr/testify/require"
	"go.uber.org/zap"
)

// TestUnmarshalLogs_Body should succeed regardless of body content type
func TestUnmarshalLogs_Body(t *testing.T) {
	logger := zap.NewNop()
	unmarshaler := newRawLogsUnmarshaler(logger)

	testCases := []struct {
		name   string
		body   []byte
		expect []byte
	}{
		{
			name: "empty body",
			body: []byte(""),
			// note that zero length body sets otlp Body to []byte(nil) not []byte{}
			expect: []byte(nil),
		},
		{
			name:   "nil body",
			body:   []byte(nil),
			expect: []byte(nil),
		},
		{
			name:   "invalid json",
			body:   []byte("{malformed-json"),
			expect: []byte("{malformed-json"),
		},
		{
			name:   "valid json",
			body:   []byte(`{"key": "value"}`),
			expect: []byte(`{"key": "value"}`),
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			event := &azeventhubs.ReceivedEventData{
				EventData: azeventhubs.EventData{
					Body:       tc.body,
					Properties: map[string]interface{}{"someKey": "someValue"},
				},
			}
			logs, err := unmarshaler.UnmarshalLogs(event)
			require.NoError(t, err, "Expected no error for valid event data but got one")
			require.Equal(t, 1, logs.ResourceLogs().Len(), "Expected 1 ResourceLog")
			otlpBody := logs.ResourceLogs().At(0).ScopeLogs().At(0).LogRecords().At(0).Body().Bytes().AsRaw()
			require.Equal(t, otlpBody, tc.expect)
		})
	}
}

func TestUnmarshalLogs_Attributes(t *testing.T) {
	logger := zap.NewNop()
	unmarshaler := newRawLogsUnmarshaler(logger)

	testCases := []struct {
		name       string
		properties map[string]any
		expect     map[string]any
	}{
		{
			name:       "empty properties",
			properties: map[string]any{},
			expect:     map[string]any(nil),
		},
		{
			name:       "nil properties",
			properties: map[string]any(nil),
			expect:     map[string]any(nil),
		},
		{
			name:       "single property",
			properties: map[string]interface{}{"someKey": "someValue"},
			expect:     map[string]interface{}{"someKey": "someValue"},
		},
		{
			name:       "multiple properties",
			properties: map[string]interface{}{"someKey": "someValue", "anotherKey": "anotherValue"},
			expect:     map[string]interface{}{"someKey": "someValue", "anotherKey": "anotherValue"},
		},
	}

	var et = time.Now()
	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			event := &azeventhubs.ReceivedEventData{
				EnqueuedTime:     &et,
				SystemProperties: map[string]interface{}{"syskey1": "sysval1", "syskey2": "sysval2"},
				EventData: azeventhubs.EventData{
					Body:       []byte(""),
					Properties: tc.properties,
				},
			}
			logs, err := unmarshaler.UnmarshalLogs(event)
			require.NoError(t, err, "Expected no error for valid event data but got one")
			resAttrs := logs.ResourceLogs().At(0).ScopeLogs().At(0).LogRecords().At(0).Attributes().AsRaw()
			// this is because
			require.Equal(t, len(resAttrs), len(tc.expect), "Expected %d attributes, got %d", len(tc.expect), len(resAttrs))
			if len(resAttrs) == 0 {
				return
			}

			require.Equal(t, resAttrs, tc.expect, "Not equal:\nexpected: %v\nactual: %v", tc.expect, resAttrs)
		})
	}
}
